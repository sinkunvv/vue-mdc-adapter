{"version":3,"file":"index.js","sources":["../components/base/base-plugin.js","../components/base/custom-event.js","../components/base/dispatch-event-mixin.js","../components/base/uniqueid-mixin.js","../node_modules/@material/top-app-bar/constants.js","../node_modules/@material/top-app-bar/adapter.js","../node_modules/@material/base/foundation.js","../node_modules/@material/top-app-bar/foundation.js","../node_modules/@material/top-app-bar/short/foundation.js","../components/top-app-bar/mdc-top-app-bar.vue","../components/top-app-bar/mdc-top-app-bar-action.vue","../components/top-app-bar/index.js","../components/index.js"],"sourcesContent":["export function BasePlugin(components) {\r\n  return {\r\n    version: '__VERSION__',\r\n    install: vm => {\r\n      for (let key in components) {\r\n        let component = components[key]\r\n        vm.component(component.name, component)\r\n      }\r\n    },\r\n    components\r\n  }\r\n}\r\n","/* global CustomEvent */\r\n\r\nexport function emitCustomEvent(el, evtType, evtData, shouldBubble = false) {\r\n  let evt\r\n  if (typeof CustomEvent === 'function') {\r\n    evt = new CustomEvent(evtType, {\r\n      detail: evtData,\r\n      bubbles: shouldBubble\r\n    })\r\n  } else {\r\n    evt = document.createEvent('CustomEvent')\r\n    evt.initCustomEvent(evtType, shouldBubble, false, evtData)\r\n  }\r\n  el.dispatchEvent(evt)\r\n}\r\n","export const DispatchEventMixin = {\r\n  props: {\r\n    event: String,\r\n    'event-target': Object,\r\n    'event-args': Array\r\n  },\r\n  methods: {\r\n    dispatchEvent(evt) {\r\n      evt && this.$emit(evt.type, evt)\r\n      if (this.event) {\r\n        let target = this.eventTarget || this.$root\r\n        let args = this.eventArgs || []\r\n        target.$emit(this.event, ...args)\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    listeners() {\r\n      return {\r\n        ...this.$listeners,\r\n        click: e => this.dispatchEvent(e)\r\n      }\r\n    }\r\n  }\r\n}\r\n","const scope =\r\n  Math.floor(Math.random() * Math.floor(0x10000000)).toString() + '-'\r\n\r\nexport const VMAUniqueIdMixin = {\r\n  beforeCreate() {\r\n    this.vma_uid_ = scope + this._uid\r\n  }\r\n}\r\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  FIXED_CLASS: 'mdc-top-app-bar--fixed',\n  FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',\n  SHORT_CLASS: 'mdc-top-app-bar--short',\n  SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item',\n  SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed',\n};\n\n/** @enum {number} */\nconst numbers = {\n  DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,\n  MAX_TOP_APP_BAR_HEIGHT: 128,\n};\n\n/** @enum {string} */\nconst strings = {\n  ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',\n  NAVIGATION_EVENT: 'MDCTopAppBar:nav',\n  NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',\n  ROOT_SELECTOR: '.mdc-top-app-bar',\n  TITLE_SELECTOR: '.mdc-top-app-bar__title',\n};\n\nexport {strings, cssClasses, numbers};\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Top App Bar\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Top App Bar into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTopAppBarAdapter {\n  /**\n   * Adds a class to the root Element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root Element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root Element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Sets the specified inline style property on the root Element to the given value.\n   * @param {string} property\n   * @param {string} value\n   */\n  setStyle(property, value) {}\n\n  /**\n   * Gets the height of the top app bar.\n   * @return {number}\n   */\n  getTopAppBarHeight() {}\n\n  /**\n   * Registers an event handler on the navigation icon element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  registerNavigationIconInteractionHandler(type, handler) {}\n\n  /**\n   * Deregisters an event handler on the navigation icon element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterNavigationIconInteractionHandler(type, handler) {}\n\n  /**\n   * Emits an event when the navigation icon is clicked.\n   */\n  notifyNavigationIconClicked() {}\n\n  /** @param {function(!Event)} handler */\n  registerScrollHandler(handler) {}\n\n  /** @param {function(!Event)} handler */\n  deregisterScrollHandler(handler) {}\n\n  /** @param {function(!Event)} handler */\n  registerResizeHandler(handler) {}\n\n  /** @param {function(!Event)} handler */\n  deregisterResizeHandler(handler) {}\n\n  /** @return {number} */\n  getViewportScrollY() {}\n\n  /** @return {number} */\n  getTotalActionItems() {}\n}\n\nexport default MDCTopAppBarAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {strings, cssClasses, numbers} from './constants';\nimport MDCTopAppBarAdapter from './adapter';\nimport MDCFoundation from '@material/base/foundation';\n\n/**\n * @extends {MDCFoundation<!MDCTopAppBarAdapter>}\n */\nclass MDCTopAppBarBaseFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {number} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /**\n   * {@see MDCTopAppBarAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTopAppBarAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTopAppBarAdapter} */ ({\n      hasClass: (/* className: string */) => {},\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      setStyle: (/* property: string, value: string */) => {},\n      getTopAppBarHeight: () => {},\n      registerNavigationIconInteractionHandler: (/* type: string, handler: EventListener */) => {},\n      deregisterNavigationIconInteractionHandler: (/* type: string, handler: EventListener */) => {},\n      notifyNavigationIconClicked: () => {},\n      registerScrollHandler: (/* handler: EventListener */) => {},\n      deregisterScrollHandler: (/* handler: EventListener */) => {},\n      registerResizeHandler: (/* handler: EventListener */) => {},\n      deregisterResizeHandler: (/* handler: EventListener */) => {},\n      getViewportScrollY: () => /* number */ 0,\n      getTotalActionItems: () => /* number */ 0,\n    });\n  }\n\n  /**\n   * @param {!MDCTopAppBarAdapter} adapter\n   */\n  constructor(/** @type {!MDCTopAppBarAdapter} */ adapter) {\n    super(Object.assign(MDCTopAppBarBaseFoundation.defaultAdapter, adapter));\n\n    this.navClickHandler_ = () => this.adapter_.notifyNavigationIconClicked();\n  }\n\n  init() {\n    this.adapter_.registerNavigationIconInteractionHandler('click', this.navClickHandler_);\n  }\n\n  destroy() {\n    this.adapter_.deregisterNavigationIconInteractionHandler('click', this.navClickHandler_);\n  }\n}\n\nexport default MDCTopAppBarBaseFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCTopAppBarAdapter from '../adapter';\nimport MDCTopAppBarBaseFoundation from '../foundation';\nimport {cssClasses} from '../constants';\n\n/**\n * @extends {MDCTopAppBarBaseFoundation<!MDCShortTopAppBarFoundation>}\n * @final\n */\nclass MDCShortTopAppBarFoundation extends MDCTopAppBarBaseFoundation {\n  /**\n   * @param {!MDCTopAppBarAdapter} adapter\n   */\n  constructor(adapter) {\n    super(adapter);\n    // State variable for the current top app bar state\n    this.isCollapsed = false;\n\n    this.scrollHandler_ = () => this.shortAppBarScrollHandler_();\n  }\n\n  init() {\n    super.init();\n    const isAlwaysCollapsed = this.adapter_.hasClass(cssClasses.SHORT_COLLAPSED_CLASS);\n\n    if (this.adapter_.getTotalActionItems() > 0) {\n      this.adapter_.addClass(cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);\n    }\n\n    if (!isAlwaysCollapsed) {\n      this.adapter_.registerScrollHandler(this.scrollHandler_);\n      this.shortAppBarScrollHandler_();\n    }\n  }\n\n  destroy() {\n    super.destroy();\n    this.adapter_.deregisterScrollHandler(this.scrollHandler_);\n  }\n\n\n  /**\n   * Scroll handler for applying/removing the collapsed modifier class\n   * on the short top app bar.\n   * @private\n   */\n  shortAppBarScrollHandler_() {\n    const currentScroll = this.adapter_.getViewportScrollY();\n\n    if (currentScroll <= 0) {\n      if (this.isCollapsed) {\n        this.adapter_.removeClass(cssClasses.SHORT_COLLAPSED_CLASS);\n        this.isCollapsed = false;\n      }\n    } else {\n      if (!this.isCollapsed) {\n        this.adapter_.addClass(cssClasses.SHORT_COLLAPSED_CLASS);\n        this.isCollapsed = true;\n      }\n    }\n  }\n}\n\nexport default MDCShortTopAppBarFoundation;\n","<template>\r\n  <header\r\n    ref=\"root\"\r\n    :class=\"rootClasses\"\r\n    :style=\"rootStyles\"\r\n    v-on=\"$listeners\">\r\n    <div class=\"mdc-top-app-bar__row\">\r\n      <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\">\r\n        <a\r\n          v-if=\"haveNavigationIcon\"\r\n          ref=\"navigationIcon\"\r\n          :class=\"naviconClasses\"\r\n          href=\"#\"\r\n          v-on=\"listeners\">{{ icon }}</a>\r\n        <span\r\n          v-if=\"!!title\"\r\n          class=\"mdc-top-app-bar__title\">{{ title }}</span>\r\n      </section>\r\n      <section\r\n        v-if=\"$slots.default\"\r\n        class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\">\r\n        <slot/>\r\n      </section>\r\n    </div>\r\n    <slot name=\"tabs\"/>\r\n  </header>\r\n</template>\r\n\r\n<script>\r\nimport MDCTopAppBarFoundation from '@material/top-app-bar/foundation'\r\nimport MDCShortTopAppBarFoundation from '@material/top-app-bar/short/foundation'\r\nimport { DispatchEventMixin } from '../base'\r\n\r\nexport default {\r\n  name: 'mdc-top-app-bar',\r\n  mixins: [DispatchEventMixin],\r\n  props: {\r\n    short: Boolean,\r\n    shortCollapsed: Boolean,\r\n    prominent: Boolean,\r\n    fixed: Boolean,\r\n    title: String,\r\n    icon: {\r\n      type: String,\r\n      default: 'menu'\r\n    },\r\n    iconClasses: Object,\r\n    dense: Boolean\r\n  },\r\n  data() {\r\n    return {\r\n      rootStyles: {},\r\n      rootClasses: {\r\n        'mdc-top-app-bar': true,\r\n        'mdc-top-app-bar--dense': this.dense,\r\n        'mdc-top-app-bar--short': this.short,\r\n        'mdc-top-app-bar--short-collapsed': this.shortCollapsed,\r\n        'mdc-top-app-bar--prominent': this.prominent,\r\n        'mdc-top-app-bar--fixed': this.fixed\r\n      },\r\n      foundation: null\r\n    }\r\n  },\r\n  computed: {\r\n    haveNavigationIcon() {\r\n      return !!this.icon || this.iconClasses\r\n    },\r\n    naviconClasses() {\r\n      return {\r\n        'mdc-top-app-bar__navigation-icon': true,\r\n        'material-icons': !!this.icon,\r\n        ...this.iconClasses\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    const adapter = {\r\n      addClass: className => {\r\n        this.$set(this.rootClasses, className, true)\r\n      },\r\n      removeClass: className => {\r\n        this.$delete(this.rootClasses, className)\r\n      },\r\n      hasClass: className => {\r\n        return this.$refs.root.classList.contains(className)\r\n      },\r\n      setStyle: (property, value) => {\r\n        this.$set(this.rootStyles, property, value)\r\n      },\r\n      getTopAppBarHeight: () => this.$el.clientHeight,\r\n      registerNavigationIconInteractionHandler: (type, handler) => {\r\n        if (this.$refs.navigationIcon) {\r\n          this.$refs.navigationIcon.addEventListener(type, handler)\r\n        }\r\n      },\r\n      deregisterNavigationIconInteractionHandler: (type, handler) => {\r\n        if (this.$refs.navigationIcon) {\r\n          this.$refs.navigationIcon.removeEventListener(type, handler)\r\n        }\r\n      },\r\n      notifyNavigationIconClicked: () => {\r\n        this.$emit('nav')\r\n      },\r\n      registerScrollHandler: handler => {\r\n        window.addEventListener('scroll', handler)\r\n      },\r\n      deregisterScrollHandler: handler => {\r\n        window.removeEventListener('scroll', handler)\r\n      },\r\n      registerResizeHandler: handler =>\r\n        window.addEventListener('resize', handler),\r\n      deregisterResizeHandler: handler =>\r\n        window.removeEventListener('resize', handler),\r\n\r\n      getViewportScrollY: () => {\r\n        return window.pageYOffset\r\n      },\r\n      getTotalActionItems: () =>\r\n        this.$refs.root.querySelectorAll(\r\n          MDCTopAppBarFoundation.strings.ACTION_ITEM_SELECTOR\r\n        ).length\r\n    }\r\n\r\n    this.foundation = this.short\r\n      ? new MDCShortTopAppBarFoundation(adapter)\r\n      : new MDCTopAppBarFoundation(adapter)\r\n\r\n    this.foundation.init()\r\n  },\r\n  beforeDestroy() {\r\n    this.foundation.destroy()\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n  <a\r\n    :class=\"actioniconClasses\"\r\n    href=\"#\"\r\n    class=\"mdc-top-app-bar-action mdc-top-app-bar--action mdc-top-app-bar__action-item\"\r\n    v-on=\"listeners\">\r\n    <slot>{{ icon }}</slot>\r\n  </a>\r\n</template>\r\n\r\n<script>\r\nimport { DispatchEventMixin } from '../base'\r\nimport { RippleMixin } from '../ripple'\r\n\r\nexport default {\r\n  name: 'mdc-top-app-bar-action',\r\n  mixins: [DispatchEventMixin, RippleMixin],\r\n  props: {\r\n    icon: String,\r\n    iconClasses: Object\r\n  },\r\n  computed: {\r\n    actioniconClasses() {\r\n      return {\r\n        'material-icons': !!this.icon,\r\n        ...this.iconClasses\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n","import { BasePlugin } from '../base'\r\nimport mdcTopAppBar from './mdc-top-app-bar.vue'\r\nimport mdcTopAppBarAction from './mdc-top-app-bar-action.vue'\r\n\r\nexport { mdcTopAppBar, mdcTopAppBarAction }\r\n\r\nexport default BasePlugin({\r\n  mdcTopAppBar,\r\n  mdcTopAppBarAction\r\n})\r\n","//\r\n// vue PlugIn\r\n//\r\nimport VueMDCButton from './button'\r\nimport VueMDCCard from './card'\r\nimport VueMDCCheckbox from './checkbox'\r\nimport VueMDCChipSet from './chips'\r\nimport VueMDCDialog from './dialog'\r\nimport VueMDCDrawer from './drawer'\r\nimport VueMDCElevation from './elevation'\r\nimport VueMDCFab from './fab'\r\nimport VueMDCGridList from './grid-list'\r\nimport VueMDCIcon from './icon'\r\nimport VueMDCIconToggle from './icon-toggle'\r\nimport VueMDCLayoutApp from './layout-app'\r\nimport VueMDCLayoutGrid from './layout-grid'\r\nimport VueMDCLinearProgress from './linear-progress'\r\nimport VueMDCList from './list'\r\nimport VueMDCMenu from './menu'\r\nimport VueMDCRadio from './radio'\r\nimport VueMDCRipple from './ripple'\r\nimport VueMDCSelect from './select'\r\nimport VueMDCSlider from './slider'\r\nimport VueMDCSnackbar from './snackbar'\r\nimport VueMDCSwitch from './switch'\r\nimport VueMDCTabs from './tabs'\r\nimport VueMDCTextfield from './textfield'\r\nimport VueMDCTheme from './theme'\r\nimport VueMDCToolbar from './toolbar'\r\nimport VueMDCTopAppBar from './top-app-bar'\r\nimport VueMDCTypography from './typography'\r\n\r\nexport default {\r\n  version: '__VERSION__',\r\n  install(vm) {\r\n    vm.use(VueMDCButton)\r\n    vm.use(VueMDCCard)\r\n    vm.use(VueMDCCheckbox)\r\n    vm.use(VueMDCChipSet)\r\n    vm.use(VueMDCElevation)\r\n    vm.use(VueMDCDialog)\r\n    vm.use(VueMDCDrawer)\r\n    vm.use(VueMDCElevation)\r\n    vm.use(VueMDCFab)\r\n    vm.use(VueMDCGridList)\r\n    vm.use(VueMDCIcon)\r\n    vm.use(VueMDCIconToggle)\r\n    vm.use(VueMDCLayoutApp)\r\n    vm.use(VueMDCLayoutGrid)\r\n    vm.use(VueMDCLinearProgress)\r\n    vm.use(VueMDCList)\r\n    vm.use(VueMDCMenu)\r\n    vm.use(VueMDCRadio)\r\n    vm.use(VueMDCRipple)\r\n    vm.use(VueMDCSelect)\r\n    vm.use(VueMDCSlider)\r\n    vm.use(VueMDCSnackbar)\r\n    vm.use(VueMDCSwitch)\r\n    vm.use(VueMDCTabs)\r\n    vm.use(VueMDCTextfield)\r\n    vm.use(VueMDCTheme)\r\n    vm.use(VueMDCToolbar)\r\n    vm.use(VueMDCTopAppBar)\r\n    vm.use(VueMDCTypography)\r\n  }\r\n}\r\n"],"names":["BasePlugin","components","key","component","name","DispatchEventMixin","String","Object","Array","evt","$emit","type","event","target","eventTarget","$root","args","eventArgs","$listeners","dispatchEvent","e","scope","Math","floor","random","toString","cssClasses","numbers","strings","MDCTopAppBarAdapter","className","property","value","handler","MDCFoundation","adapter","adapter_","MDCTopAppBarBaseFoundation","babelHelpers.extends","defaultAdapter","navClickHandler_","notifyNavigationIconClicked","registerNavigationIconInteractionHandler","deregisterNavigationIconInteractionHandler","MDCShortTopAppBarFoundation","isCollapsed","scrollHandler_","shortAppBarScrollHandler_","isAlwaysCollapsed","hasClass","SHORT_COLLAPSED_CLASS","getTotalActionItems","addClass","SHORT_HAS_ACTION_ITEM_CLASS","registerScrollHandler","deregisterScrollHandler","currentScroll","getViewportScrollY","removeClass","vm","use","VueMDCButton","VueMDCCard","VueMDCCheckbox","VueMDCChipSet","VueMDCElevation","VueMDCDialog","VueMDCDrawer","VueMDCFab","VueMDCGridList","VueMDCIcon","VueMDCIconToggle","VueMDCLayoutApp","VueMDCLayoutGrid","VueMDCLinearProgress","VueMDCList","VueMDCMenu","VueMDCRadio","VueMDCRipple","VueMDCSelect","VueMDCSlider","VueMDCSnackbar","VueMDCSwitch","VueMDCTabs","VueMDCTextfield","VueMDCTheme","VueMDCToolbar","VueMDCTopAppBar","VueMDCTypography"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,UAAT,CAAoBC,UAApB,EAAgC;SAC9B;aACI,QADJ;aAEI,qBAAM;WACR,IAAIC,GAAT,IAAgBD,UAAhB,EAA4B;YACtBE,YAAYF,WAAWC,GAAX,CAAhB;WACGC,SAAH,CAAaA,UAAUC,IAAvB,EAA6BD,SAA7B;;KALC;;GAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDF;;ACAO,IAAME,qBAAqB;SACzB;WACEC,MADF;oBAEWC,MAFX;kBAGSC;GAJgB;WAMvB;iBAAA,yBACOC,GADP,EACY;aACV,KAAKC,KAAL,CAAWD,IAAIE,IAAf,EAAqBF,GAArB,CAAP;UACI,KAAKG,KAAT,EAAgB;YACVC,SAAS,KAAKC,WAAL,IAAoB,KAAKC,KAAtC;YACIC,OAAO,KAAKC,SAAL,IAAkB,EAA7B;eACOP,KAAP,gBAAa,KAAKE,KAAlB,2BAA4BI,IAA5B;;;GAZ0B;YAgBtB;aAAA,uBACI;;;0BAEL,KAAKE,UADV;eAES;iBAAK,MAAKC,aAAL,CAAmBC,CAAnB,CAAL;;;;;CApBR;;ACAP,IAAMC,QACJC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBF,KAAKC,KAAL,CAAW,UAAX,CAA3B,EAAmDE,QAAnD,KAAgE,GADlE;;ACAA;;;;;;;;;;;;;;;;;;AAkBA,IAAMC,aAAa;eACJ,wBADI;wBAEK,iCAFL;eAGJ,wBAHI;+BAIY,wCAJZ;yBAKM;CALzB;;;AASA,IAAMC,UAAU;oCACoB,GADpB;0BAEU;CAF1B;;;AAMA,IAAMC,UAAU;wBACQ,+BADR;oBAEI,kBAFJ;4BAGY,mCAHZ;iBAIC,kBAJD;kBAKE;CALlB;;ACjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6BMC;;;;;;;;;;;;6BAKKC,WAAW;;;;;;;;;gCAMRA,WAAW;;;;;;;;;;6BAOdA,WAAW;;;;;;;;;;6BAOXC,UAAUC,OAAO;;;;;;;;;yCAML;;;;;;;;;;6DAOoBrB,MAAMsB,SAAS;;;;;;;;;;+DAObtB,MAAMsB,SAAS;;;;;;;;kDAK5B;;;;;;0CAGRA,SAAS;;;;;;4CAGPA,SAAS;;;;;;0CAGXA,SAAS;;;;;;4CAGPA,SAAS;;;;;;yCAGZ;;;;;;0CAGC;;;;;ACjGxB;;;;;;;;;;;;;;;;;;;;IAoBMC;;;;;2BAEoB;;;aAGf,EAAP;;;;;;;2BAImB;;;aAGZ,EAAP;;;;;;;2BAImB;;;aAGZ,EAAP;;;;;;;2BAI0B;;;;aAInB,EAAP;;;;;;;;;2BAMwB;QAAdC,OAAc,uEAAJ,EAAI;;;;SAEnBC,QAAL,GAAgBD,OAAhB;;;;;2BAGK;;;;;8BAIG;;;;;;;AC9DZ;;;;;;;;;;;;;;;;;;;;;IAwBME;;;;;;2BAEiB;aACZT,OAAP;;;;;;;2BAIsB;aACfF,UAAP;;;;;;;2BAImB;aACZC,OAAP;;;;;;;;;;;2BAQ0B;iDACkB;oBAChC,2CAA6B,EADG;oBAEhC,2CAA6B,EAFG;uBAG7B,8CAA6B,EAHA;oBAIhC,yDAA2C,EAJX;8BAKtB,8BAAM,EALgB;oDAMA,8FAAgD,EANhD;sDAOE,gGAAgD,EAPlD;uCAQb,uCAAM,EARO;iCASnB,6DAAkC,EATf;mCAUjB,+DAAkC,EAVjB;iCAWnB,6DAAkC,EAXf;mCAYjB,+DAAkC,EAZjB;8BAatB;gCAAmB;;WAbG;+BAcrB;gCAAmB;;;;;;;;;;;;;0EAOIQ,OAAhD,EAAyD;;;uJACjDG,SAAcD,2BAA2BE,cAAzC,EAAyDJ,OAAzD,CADiD;;UAGlDK,gBAAL,GAAwB;aAAM,MAAKJ,QAAL,CAAcK,2BAAd,EAAN;KAAxB;;;;;;2BAGK;WACAL,QAAL,CAAcM,wCAAd,CAAuD,OAAvD,EAAgE,KAAKF,gBAArE;;;;8BAGQ;WACHJ,QAAL,CAAcO,0CAAd,CAAyD,OAAzD,EAAkE,KAAKH,gBAAvE;;;;EAtDqCN;;ACxBzC;;;;;;;;;;;;;;;;;;;;;;IAyBMU;;;;;;uCAIQT,OAAZ,EAAqB;;;;yJACbA,OADa;;UAGdU,WAAL,GAAmB,KAAnB;;UAEKC,cAAL,GAAsB;aAAM,MAAKC,yBAAL,EAAN;KAAtB;;;;;;2BAGK;;UAECC,oBAAoB,KAAKZ,QAAL,CAAca,QAAd,CAAuBvB,WAAWwB,qBAAlC,CAA1B;;UAEI,KAAKd,QAAL,CAAce,mBAAd,KAAsC,CAA1C,EAA6C;aACtCf,QAAL,CAAcgB,QAAd,CAAuB1B,WAAW2B,2BAAlC;;;UAGE,CAACL,iBAAL,EAAwB;aACjBZ,QAAL,CAAckB,qBAAd,CAAoC,KAAKR,cAAzC;aACKC,yBAAL;;;;;8BAIM;;WAEHX,QAAL,CAAcmB,uBAAd,CAAsC,KAAKT,cAA3C;;;;;;;;;;;gDAS0B;UACpBU,gBAAgB,KAAKpB,QAAL,CAAcqB,kBAAd,EAAtB;;UAEID,iBAAiB,CAArB,EAAwB;YAClB,KAAKX,WAAT,EAAsB;eACfT,QAAL,CAAcsB,WAAd,CAA0BhC,WAAWwB,qBAArC;eACKL,WAAL,GAAmB,KAAnB;;OAHJ,MAKO;YACD,CAAC,KAAKA,WAAV,EAAuB;eAChBT,QAAL,CAAcgB,QAAd,CAAuB1B,WAAWwB,qBAAlC;eACKL,WAAL,GAAmB,IAAnB;;;;;;EAhDkCR;;;;ACQ1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAA;;;AA9BY,2BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWZ;;;;;;;;;;;;;;CAAA;;;AAXY,+BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGZ,sBAAerC,WAAW;4BAAA;;CAAX,CAAf;;ACNA;AACA;AA+BA,YAAe;WACJ,QADI;SAAA,mBAEL2D,EAFK,EAED;OACPC,GAAH,CAAOC,YAAP;OACGD,GAAH,CAAOE,UAAP;OACGF,GAAH,CAAOG,cAAP;OACGH,GAAH,CAAOI,aAAP;OACGJ,GAAH,CAAOK,eAAP;OACGL,GAAH,CAAOM,YAAP;OACGN,GAAH,CAAOO,YAAP;OACGP,GAAH,CAAOK,eAAP;OACGL,GAAH,CAAOQ,SAAP;OACGR,GAAH,CAAOS,cAAP;OACGT,GAAH,CAAOU,UAAP;OACGV,GAAH,CAAOW,gBAAP;OACGX,GAAH,CAAOY,eAAP;OACGZ,GAAH,CAAOa,gBAAP;OACGb,GAAH,CAAOc,oBAAP;OACGd,GAAH,CAAOe,UAAP;OACGf,GAAH,CAAOgB,UAAP;OACGhB,GAAH,CAAOiB,WAAP;OACGjB,GAAH,CAAOkB,YAAP;OACGlB,GAAH,CAAOmB,YAAP;OACGnB,GAAH,CAAOoB,YAAP;OACGpB,GAAH,CAAOqB,cAAP;OACGrB,GAAH,CAAOsB,YAAP;OACGtB,GAAH,CAAOuB,UAAP;OACGvB,GAAH,CAAOwB,eAAP;OACGxB,GAAH,CAAOyB,WAAP;OACGzB,GAAH,CAAO0B,aAAP;OACG1B,GAAH,CAAO2B,eAAP;OACG3B,GAAH,CAAO4B,gBAAP;;CA/BJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}