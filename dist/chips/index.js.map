{"version":3,"file":"index.js","sources":["../../components/base/base-plugin.js","../../components/base/custom-link.js","../../components/base/custom-event.js","../../components/base/uniqueid-mixin.js","../../node_modules/@material/base/foundation.js","../../node_modules/@material/chips/chip/adapter.js","../../node_modules/@material/chips/chip/constants.js","../../node_modules/@material/chips/chip/foundation.js","../../components/chips/mdc-chip.vue","../../node_modules/@material/chips/chip-set/adapter.js","../../node_modules/@material/chips/chip-set/constants.js","../../node_modules/@material/chips/chip-set/foundation.js","../../components/chips/mdc-chip-set.vue","../../components/chips/index.js"],"sourcesContent":["export function BasePlugin(components) {\r\n  return {\r\n    version: '__VERSION__',\r\n    install: vm => {\r\n      for (let key in components) {\r\n        let component = components[key]\r\n        vm.component(component.name, component)\r\n      }\r\n    },\r\n    components\r\n  }\r\n}\r\n","export const CustomLink = {\r\n  name: 'custom-link',\r\n  functional: true,\r\n  props: {\r\n    tag: { type: String, default: 'a' },\r\n    link: Object\r\n  },\r\n  render(h, context) {\r\n    let element\r\n    let data = Object.assign({}, context.data)\r\n\r\n    if (context.props.link && context.parent.$router) {\r\n      // router-link case\r\n      element = context.parent.$root.$options.components['router-link']\r\n      data.props = Object.assign({ tag: context.props.tag }, context.props.link)\r\n      if (data.on.click) {\r\n        data.nativeOn = { click: data.on.click }\r\n      }\r\n    } else {\r\n      // element fallback\r\n      element = context.props.tag\r\n    }\r\n\r\n    return h(element, data, context.children)\r\n  }\r\n}\r\n\r\nexport const CustomLinkMixin = {\r\n  props: {\r\n    to: [String, Object],\r\n    exact: Boolean,\r\n    append: Boolean,\r\n    replace: Boolean,\r\n    activeClass: String,\r\n    exactActiveClass: String\r\n  },\r\n  computed: {\r\n    link() {\r\n      return (\r\n        this.to && {\r\n          to: this.to,\r\n          exact: this.exact,\r\n          append: this.append,\r\n          replace: this.replace,\r\n          activeClass: this.activeClass,\r\n          exactActiveClass: this.exactActiveClass\r\n        }\r\n      )\r\n    }\r\n  },\r\n  components: {\r\n    CustomLink\r\n  }\r\n}\r\n","/* global CustomEvent */\r\n\r\nexport function emitCustomEvent(el, evtType, evtData, shouldBubble = false) {\r\n  let evt\r\n  if (typeof CustomEvent === 'function') {\r\n    evt = new CustomEvent(evtType, {\r\n      detail: evtData,\r\n      bubbles: shouldBubble\r\n    })\r\n  } else {\r\n    evt = document.createEvent('CustomEvent')\r\n    evt.initCustomEvent(evtType, shouldBubble, false, evtData)\r\n  }\r\n  el.dispatchEvent(evt)\r\n}\r\n","const scope =\r\n  Math.floor(Math.random() * Math.floor(0x10000000)).toString() + '-'\r\n\r\nexport const VMAUniqueIdMixin = {\r\n  beforeCreate() {\r\n    this.vma_uid_ = scope + this._uid\r\n  }\r\n}\r\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Chip.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Chip into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCChipAdapter {\n  /**\n   * Adds a class to the root element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Adds a class to the leading icon element.\n   * @param {string} className\n   */\n  addClassToLeadingIcon(className) {}\n\n  /**\n   * Removes a class from the leading icon element.\n   * @param {string} className\n   */\n  removeClassFromLeadingIcon(className) {}\n\n  /**\n   * Returns true if target has className, false otherwise.\n   * @param {!EventTarget} target\n   * @param {string} className\n   * @return {boolean}\n   */\n  eventTargetHasClass(target, className) {}\n\n  /**\n   * Emits a custom \"MDCChip:interaction\" event denoting the chip has been\n   * interacted with (typically on click or keydown).\n   */\n  notifyInteraction() {}\n\n  /**\n   * Emits a custom \"MDCChip:trailingIconInteraction\" event denoting the trailing icon has been\n   * interacted with (typically on click or keydown).\n   */\n  notifyTrailingIconInteraction() {}\n\n  /**\n   * Emits a custom event \"MDCChip:removal\" denoting the chip will be removed.\n   */\n  notifyRemoval() {}\n\n  /**\n   * Returns the computed property value of the given style property on the root element.\n   * @param {string} propertyName\n   * @return {string}\n   */\n  getComputedStyleValue(propertyName) {}\n\n  /**\n   * Sets the property value of the given style property on the root element.\n   * @param {string} propertyName\n   * @param {string} value\n   */\n  setStyleProperty(propertyName, value) {}\n}\n\nexport default MDCChipAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  ENTRY_ANIMATION_NAME: 'mdc-chip-entry',\n  INTERACTION_EVENT: 'MDCChip:interaction',\n  TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',\n  REMOVAL_EVENT: 'MDCChip:removal',\n  CHECKMARK_SELECTOR: '.mdc-chip__checkmark',\n  LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',\n  TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  CHECKMARK: 'mdc-chip__checkmark',\n  CHIP_EXIT: 'mdc-chip--exit',\n  HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',\n  LEADING_ICON: 'mdc-chip__icon--leading',\n  TRAILING_ICON: 'mdc-chip__icon--trailing',\n  SELECTED: 'mdc-chip--selected',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCChipAdapter from './adapter';\nimport {strings, cssClasses} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCChipAdapter>}\n * @final\n */\nclass MDCChipFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCChipAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCChipAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCChipAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      addClassToLeadingIcon: () => {},\n      removeClassFromLeadingIcon: () => {},\n      eventTargetHasClass: () => {},\n      notifyInteraction: () => {},\n      notifyTrailingIconInteraction: () => {},\n      notifyRemoval: () => {},\n      getComputedStyleValue: () => {},\n      setStyleProperty: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCChipAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCChipFoundation.defaultAdapter, adapter));\n\n    /**\n     * Whether a trailing icon click should immediately trigger exit/removal of the chip.\n     * @private {boolean}\n     * */\n    this.shouldRemoveOnTrailingIconClick_ = true;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isSelected() {\n    return this.adapter_.hasClass(cssClasses.SELECTED);\n  }\n\n  /**\n   * @param {boolean} selected\n   */\n  setSelected(selected) {\n    if (selected) {\n      this.adapter_.addClass(cssClasses.SELECTED);\n    } else {\n      this.adapter_.removeClass(cssClasses.SELECTED);\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  getShouldRemoveOnTrailingIconClick() {\n    return this.shouldRemoveOnTrailingIconClick_;\n  }\n\n  /**\n   * @param {boolean} shouldRemove\n   */\n  setShouldRemoveOnTrailingIconClick(shouldRemove) {\n    this.shouldRemoveOnTrailingIconClick_ = shouldRemove;\n  }\n\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n  beginExit() {\n    this.adapter_.addClass(cssClasses.CHIP_EXIT);\n  }\n\n  /**\n   * Handles an interaction event on the root element.\n   * @param {!Event} evt\n   */\n  handleInteraction(evt) {\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyInteraction();\n    }\n  }\n\n  /**\n   * Handles a transition end event on the root element.\n   * @param {!Event} evt\n   */\n  handleTransitionEnd(evt) {\n    // Handle transition end event on the chip when it is about to be removed.\n    if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.CHIP_EXIT)) {\n      if (evt.propertyName === 'width') {\n        this.adapter_.notifyRemoval();\n      } else if (evt.propertyName === 'opacity') {\n        // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5\n        const chipWidth = this.adapter_.getComputedStyleValue('width');\n\n        // On the next frame (once we get the computed width), explicitly set the chip's width\n        // to its current pixel width, so we aren't transitioning out of 'auto'.\n        requestAnimationFrame(() => {\n          this.adapter_.setStyleProperty('width', chipWidth);\n\n          // To mitigate jitter, start transitioning padding and margin before width.\n          this.adapter_.setStyleProperty('padding', '0');\n          this.adapter_.setStyleProperty('margin', '0');\n\n          // On the next frame (once width is explicitly set), transition width to 0.\n          requestAnimationFrame(() => {\n            this.adapter_.setStyleProperty('width', '0');\n          });\n        });\n      }\n      return;\n    }\n\n    // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.\n    if (evt.propertyName !== 'opacity') {\n      return;\n    }\n    if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.LEADING_ICON) &&\n        this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    } else if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.CHECKMARK) &&\n               !this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    }\n  }\n\n  /**\n   * Handles an interaction event on the trailing icon element. This is used to\n   * prevent the ripple from activating on interaction with the trailing icon.\n   * @param {!Event} evt\n   */\n  handleTrailingIconInteraction(evt) {\n    evt.stopPropagation();\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyTrailingIconInteraction();\n      if (this.shouldRemoveOnTrailingIconClick_) {\n        this.beginExit();\n      }\n    }\n  }\n}\n\n/**\n * @typedef {{\n *   detail: {\n *     chip: {foundation: !MDCChipFoundation},\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipInteractionEventType;\n\nexport {MDCChipFoundation, MDCChipInteractionEventType};\n","<template>\r\n  <div\r\n    :class=\"classes\"\r\n    :style=\"styles\"\r\n    tabindex=\"0\"\r\n    @click=\"handleInteraction\"\r\n    @keydown=\"handleInteraction\"\r\n    @transitionend=\"handleTransitionEnd\"\r\n  >\r\n    <i\r\n      v-if=\"haveleadingIcon\"\r\n      ref=\"leadingIcon\"\r\n      :class=\"leadingClasses\"\r\n      class=\"mdc-chip__icon mdc-chip__icon--leading\"\r\n    >{{ leadingIcon }}</i>\r\n    <div\r\n      v-if=\"isFilter\"\r\n      class=\"mdc-chip__checkmark\">\r\n      <svg\r\n        class=\"mdc-chip__checkmark-svg\"\r\n        viewBox=\"-2 -3 30 30\">\r\n        <path\r\n          class=\"mdc-chip__checkmark-path\"\r\n          fill=\"none\"\r\n          stroke=\"black\"\r\n          d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\r\n      </svg>\r\n    </div>\r\n    <div class=\"mdc-chip__text\">\r\n      <slot/>\r\n    </div>\r\n    <i\r\n      v-if=\"havetrailingIcon\"\r\n      ref=\"trailingIcon\"\r\n      :class=\"trailingClasses\"\r\n      class=\"mdc-chip__icon mdc-chip__icon--trailing\"\r\n      tabindex=\"0\"\r\n      role=\"button\"\r\n      @click=\"handleTrailingIconInteraction\"\r\n      @keydown=\"handleTrailingIconInteraction\"\r\n    >{{ trailingIcon }}</i>\r\n  </div>\r\n</template>\r\napplyPassive\r\n<script>\r\nimport { MDCChipFoundation } from '@material/chips/chip/foundation'\r\nimport { CustomLinkMixin, emitCustomEvent } from '../base'\r\nimport { RippleBase } from '../ripple'\r\n\r\nexport default {\r\n  name: 'mdc-chip',\r\n  mixins: [CustomLinkMixin],\r\n  props: {\r\n    leadingIcon: [String],\r\n    trailingIcon: [String],\r\n    leadingIconClasses: [Object],\r\n    trailingIconClasses: [Object]\r\n  },\r\n  inject: ['mdcChipSet'],\r\n  data() {\r\n    return {\r\n      classes: {\r\n        'mdc-chip': true\r\n      },\r\n      styles: {}\r\n    }\r\n  },\r\n  computed: {\r\n    isFilter() {\r\n      return this.mdcChipSet && this.mdcChipSet.filter\r\n    },\r\n    haveleadingIcon() {\r\n      return !!this.leadingIcon || this.leadingIconClasses\r\n    },\r\n    havetrailingIcon() {\r\n      return !!this.trailingIcon || this.trailingIconClasses\r\n    },\r\n    leadingClasses() {\r\n      return Object.assign(\r\n        {},\r\n        {\r\n          'material-icons': !!this.leadingIcon\r\n        },\r\n        this.leadingIconClasses\r\n      )\r\n    },\r\n    trailingClasses() {\r\n      return Object.assign(\r\n        {},\r\n        {\r\n          'material-icons': !!this.trailingIcon\r\n        },\r\n        this.trailingIconClasses\r\n      )\r\n    }\r\n  },\r\n  mounted() {\r\n    this.foundation = new MDCChipFoundation({\r\n      addClass: className => this.$set(this.classes, className, true),\r\n      removeClass: className => this.$delete(this.classes, className),\r\n      hasClass: className => this.$el.classList.contains(className),\r\n      addClassToLeadingIcon: className => {\r\n        if (this.haveleadingIcon) {\r\n          this.$refs.leadingIcon.classList.add(className)\r\n        }\r\n      },\r\n      removeClassFromLeadingIcon: className => {\r\n        if (this.haveleadingIcon) {\r\n          this.$refs.leadingIcon.classList.remove(className)\r\n        }\r\n      },\r\n      eventTargetHasClass: (target, className) =>\r\n        target.classList.contains(className),\r\n      notifyInteraction: () => {\r\n        emitCustomEvent(\r\n          this.$el,\r\n          MDCChipFoundation.strings.INTERACTION_EVENT,\r\n          {\r\n            chip: this\r\n          },\r\n          true\r\n        )\r\n        this.mdcChipSet && this.mdcChipSet.handleInteraction\r\n      },\r\n      notifyTrailingIconInteraction: () => {\r\n        emitCustomEvent(\r\n          this.$el,\r\n          MDCChipFoundation.strings.TRAILING_ICON_INTERACTION_EVENT,\r\n          {\r\n            chip: this\r\n          },\r\n          true\r\n        )\r\n      },\r\n      notifyRemoval: () => {\r\n        emitCustomEvent(\r\n          this.$el,\r\n          MDCChipFoundation.strings.REMOVAL_EVENT,\r\n          { chip: this },\r\n          true\r\n        )\r\n      },\r\n      getComputedStyleValue: propertyName =>\r\n        window.getComputedStyle(this.$el).getPropertyValue(propertyName),\r\n      setStyleProperty: (property, value) =>\r\n        this.$set(this.styles, property, value)\r\n    })\r\n\r\n    this.foundation.init()\r\n\r\n    this.ripple = new RippleBase(this)\r\n    this.ripple.init()\r\n  },\r\n  beforeDestroy() {\r\n    this.ripple.destroy()\r\n    this.foundation.destroy()\r\n  },\r\n  methods: {\r\n    handleInteraction(evt) {\r\n      this.foundation.handleInteraction(evt)\r\n    },\r\n    handleTransitionEnd(evt) {\r\n      this.foundation.handleTransitionEnd(evt)\r\n    },\r\n    handleTrailingIconInteraction(evt) {\r\n      this.foundation.handleTrailingIconInteraction(evt)\r\n    },\r\n    toggleSelected() {\r\n      this.foundation.toggleSelected()\r\n    },\r\n    isSelected() {\r\n      return this.foundation.isSelected()\r\n    }\r\n  }\r\n}\r\n</script>\r\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line no-unused-vars\nimport {MDCChipInteractionEventType} from '../chip/foundation';\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Chip Set.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Chip Set into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCChipSetAdapter {\n  /**\n   * Returns true if the root element contains the given class name.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Removes the chip object from the chip set.\n   * @param {!Object} chip\n   */\n  removeChip(chip) {}\n}\n\nexport default MDCChipSetAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @enum {string} */\nconst strings = {\n  CHIP_SELECTOR: '.mdc-chip',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  CHOICE: 'mdc-chip-set--choice',\n  FILTER: 'mdc-chip-set--filter',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCChipSetAdapter from './adapter';\n// eslint-disable-next-line no-unused-vars\nimport {MDCChipFoundation, MDCChipInteractionEventType} from '../chip/foundation';\nimport {strings, cssClasses} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCChipSetAdapter>}\n * @final\n */\nclass MDCChipSetFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCChipSetAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCChipSetAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCChipSetAdapter} */ ({\n      hasClass: () => {},\n      removeChip: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCChipSetAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCChipSetFoundation.defaultAdapter, adapter));\n\n    /**\n     * The selected chips in the set. Only used for choice chip set or filter chip set.\n     * @private {!Array<!MDCChipFoundation>}\n     */\n    this.selectedChips_ = [];\n  }\n\n  /**\n   * Selects the given chip. Deselects all other chips if the chip set is of the choice variant.\n   * @param {!MDCChipFoundation} chipFoundation\n   */\n  select(chipFoundation) {\n    if (this.adapter_.hasClass(cssClasses.CHOICE)) {\n      this.deselectAll_();\n    }\n    chipFoundation.setSelected(true);\n    this.selectedChips_.push(chipFoundation);\n  }\n\n  /**\n   * Deselects the given chip.\n   * @param {!MDCChipFoundation} chipFoundation\n   */\n  deselect(chipFoundation) {\n    const index = this.selectedChips_.indexOf(chipFoundation);\n    if (index >= 0) {\n      this.selectedChips_.splice(index, 1);\n    }\n    chipFoundation.setSelected(false);\n  }\n\n  /** Deselects all selected chips. */\n  deselectAll_() {\n    this.selectedChips_.forEach((chipFoundation) => {\n      chipFoundation.setSelected(false);\n    });\n    this.selectedChips_.length = 0;\n  }\n\n  /**\n   * Handles a chip interaction event\n   * @param {!MDCChipInteractionEventType} evt\n   * @private\n   */\n  handleChipInteraction(evt) {\n    const chipFoundation = evt.detail.chip.foundation;\n    if (this.adapter_.hasClass(cssClasses.CHOICE) || this.adapter_.hasClass(cssClasses.FILTER)) {\n      if (chipFoundation.isSelected()) {\n        this.deselect(chipFoundation);\n      } else {\n        this.select(chipFoundation);\n      }\n    }\n  }\n\n  /**\n   * Handles the event when a chip is removed.\n   * @param {!MDCChipInteractionEventType} evt\n   * @private\n   */\n  handleChipRemoval(evt) {\n    const {chip} = evt.detail;\n    this.deselect(chip.foundation);\n    this.adapter_.removeChip(chip);\n  }\n}\n\nexport default MDCChipSetFoundation;\n","\r\n<script>\r\nimport MDCChipSetFoundation from '@material/chips/chip-set/foundation'\r\nimport { MDCChipFoundation } from '@material/chips/chip/foundation'\r\n\r\nexport default {\r\n  name: 'mdc-chip-set',\r\n  props: {\r\n    choice: [Boolean],\r\n    filter: [Boolean],\r\n    input: [Boolean]\r\n  },\r\n  provide() {\r\n    return { mdcChipSet: this }\r\n  },\r\n  data() {\r\n    return {\r\n      classes: {\r\n        'mdc-chip-set': true,\r\n        'mdc-chip-set--choice': this.choice,\r\n        'mdc-chip-set--filter': this.filter,\r\n        'mdc-chip-set--input': this.input\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.foundation = new MDCChipSetFoundation({\r\n      hasClass: className => this.$el.classList.contains(className),\r\n      removeChip: chip => {\r\n        // TODO: may need refactoring\r\n        this.$nextTick(() => chip.$destroy())\r\n      }\r\n    })\r\n\r\n    this.foundation.init()\r\n  },\r\n  beforeDestroy() {\r\n    this.foundation.destroy()\r\n  },\r\n  methods: {\r\n    handleChipInteraction(evt) {\r\n      this.foundation.handleChipInteraction(evt)\r\n    },\r\n    handleChipRemoval(evt) {\r\n      this.foundation.handleChipRemoval(evt)\r\n    }\r\n  },\r\n  render(h) {\r\n    return h(\r\n      'div',\r\n      {\r\n        class: this.classes,\r\n        on: {\r\n          [MDCChipFoundation.strings.INTERACTION_EVENT]: evt =>\r\n            this.handleChipInteraction(evt),\r\n          [MDCChipFoundation.strings.REMOVAL_EVENT]: evt =>\r\n            this.handleChipRemoval(evt)\r\n        }\r\n      },\r\n      this.$slots.default\r\n    )\r\n  }\r\n}\r\n</script>\r\n","import { BasePlugin } from '../base'\r\nimport mdcChip from './mdc-chip.vue'\r\nimport mdcChipSet from './mdc-chip-set.vue'\r\n\r\nexport { mdcChip, mdcChipSet }\r\n\r\nexport default BasePlugin({\r\n  mdcChip,\r\n  mdcChipSet\r\n})\r\n"],"names":["BasePlugin","components","key","component","name","CustomLink","type","String","default","Object","h","context","element","data","babelHelpers.extends","props","link","parent","$router","$root","$options","tag","on","click","nativeOn","children","CustomLinkMixin","Boolean","to","exact","append","replace","activeClass","exactActiveClass","emitCustomEvent","el","evtType","evtData","shouldBubble","evt","CustomEvent","document","createEvent","initCustomEvent","dispatchEvent","scope","Math","floor","random","toString","MDCFoundation","adapter","adapter_","MDCChipAdapter","className","target","propertyName","value","strings","cssClasses","MDCChipFoundation","defaultAdapter","shouldRemoveOnTrailingIconClick_","hasClass","SELECTED","selected","addClass","removeClass","shouldRemove","CHIP_EXIT","keyCode","notifyInteraction","eventTargetHasClass","notifyRemoval","chipWidth","getComputedStyleValue","setStyleProperty","LEADING_ICON","addClassToLeadingIcon","HIDDEN_LEADING_ICON","CHECKMARK","removeClassFromLeadingIcon","stopPropagation","notifyTrailingIconInteraction","beginExit","MDCChipSetAdapter","chip","MDCChipSetFoundation","selectedChips_","chipFoundation","CHOICE","deselectAll_","setSelected","push","index","indexOf","splice","forEach","length","detail","foundation","FILTER","isSelected","deselect","select","removeChip"],"mappings":"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"}